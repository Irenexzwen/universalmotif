// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// single_to_k
std::vector<std::string> single_to_k(const std::vector<std::string>& seq1, const int& k);
RcppExport SEXP _universalmotif_single_to_k(SEXP seq1SEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type seq1(seq1SEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(single_to_k(seq1, k));
    return rcpp_result_gen;
END_RCPP
}
// compare_motifs_cpp
std::vector<double> compare_motifs_cpp(const Rcpp::List& mots, const std::vector<int>& index1, const std::vector<int>& index2, const std::string& method, int minoverlap, const bool RC, std::vector<std::vector<double>>& bkg, const int type, const bool relative, const double minic, const bool norm, const int nthreads, const double posic);
RcppExport SEXP _universalmotif_compare_motifs_cpp(SEXP motsSEXP, SEXP index1SEXP, SEXP index2SEXP, SEXP methodSEXP, SEXP minoverlapSEXP, SEXP RCSEXP, SEXP bkgSEXP, SEXP typeSEXP, SEXP relativeSEXP, SEXP minicSEXP, SEXP normSEXP, SEXP nthreadsSEXP, SEXP posicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mots(motsSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type index1(index1SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type index2(index2SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type minoverlap(minoverlapSEXP);
    Rcpp::traits::input_parameter< const bool >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative(relativeSEXP);
    Rcpp::traits::input_parameter< const double >::type minic(minicSEXP);
    Rcpp::traits::input_parameter< const bool >::type norm(normSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type posic(posicSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_motifs_cpp(mots, index1, index2, method, minoverlap, RC, bkg, type, relative, minic, norm, nthreads, posic));
    return rcpp_result_gen;
END_RCPP
}
// compare_motifs_all_cpp
std::vector<std::vector<double>> compare_motifs_all_cpp(const Rcpp::List& mots, const std::string& method, int minoverlap, const bool RC, std::vector<std::vector<double>>& bkg, const int type, const bool relative, const double minic, const bool norm, const int nthreads, const double posic);
RcppExport SEXP _universalmotif_compare_motifs_all_cpp(SEXP motsSEXP, SEXP methodSEXP, SEXP minoverlapSEXP, SEXP RCSEXP, SEXP bkgSEXP, SEXP typeSEXP, SEXP relativeSEXP, SEXP minicSEXP, SEXP normSEXP, SEXP nthreadsSEXP, SEXP posicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mots(motsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type minoverlap(minoverlapSEXP);
    Rcpp::traits::input_parameter< const bool >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative(relativeSEXP);
    Rcpp::traits::input_parameter< const double >::type minic(minicSEXP);
    Rcpp::traits::input_parameter< const bool >::type norm(normSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const double >::type posic(posicSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_motifs_all_cpp(mots, method, minoverlap, RC, bkg, type, relative, minic, norm, nthreads, posic));
    return rcpp_result_gen;
END_RCPP
}
// get_comparison_matrix
Rcpp::NumericMatrix get_comparison_matrix(const std::vector<double>& ans, const std::vector<int>& index1, const std::vector<int>& index2, const std::string& method, const Rcpp::StringVector& motnames);
RcppExport SEXP _universalmotif_get_comparison_matrix(SEXP ansSEXP, SEXP index1SEXP, SEXP index2SEXP, SEXP methodSEXP, SEXP motnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type ans(ansSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type index1(index1SEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type index2(index2SEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type motnames(motnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_comparison_matrix(ans, index1, index2, method, motnames));
    return rcpp_result_gen;
END_RCPP
}
// view_motifs_prep
Rcpp::List view_motifs_prep(const Rcpp::List& mots, const std::string& method, const bool RC, int minoverlap, const double minic, const double posic, std::vector<std::vector<double>>& bkg, const bool relative, const bool norm, const Rcpp::StringVector& rnames);
RcppExport SEXP _universalmotif_view_motifs_prep(SEXP motsSEXP, SEXP methodSEXP, SEXP RCSEXP, SEXP minoverlapSEXP, SEXP minicSEXP, SEXP posicSEXP, SEXP bkgSEXP, SEXP relativeSEXP, SEXP normSEXP, SEXP rnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mots(motsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< int >::type minoverlap(minoverlapSEXP);
    Rcpp::traits::input_parameter< const double >::type minic(minicSEXP);
    Rcpp::traits::input_parameter< const double >::type posic(posicSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative(relativeSEXP);
    Rcpp::traits::input_parameter< const bool >::type norm(normSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type rnames(rnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(view_motifs_prep(mots, method, RC, minoverlap, minic, posic, bkg, relative, norm, rnames));
    return rcpp_result_gen;
END_RCPP
}
// merge_motifs_cpp
Rcpp::List merge_motifs_cpp(const Rcpp::List& mots, const std::string& method, const bool RC, int minoverlap, const double minic, const double posic, std::vector<std::vector<double>>& bkg, const bool relative, const bool norm);
RcppExport SEXP _universalmotif_merge_motifs_cpp(SEXP motsSEXP, SEXP methodSEXP, SEXP RCSEXP, SEXP minoverlapSEXP, SEXP minicSEXP, SEXP posicSEXP, SEXP bkgSEXP, SEXP relativeSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mots(motsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const bool >::type RC(RCSEXP);
    Rcpp::traits::input_parameter< int >::type minoverlap(minoverlapSEXP);
    Rcpp::traits::input_parameter< const double >::type minic(minicSEXP);
    Rcpp::traits::input_parameter< const double >::type posic(posicSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative(relativeSEXP);
    Rcpp::traits::input_parameter< const bool >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_motifs_cpp(mots, method, RC, minoverlap, minic, posic, bkg, relative, norm));
    return rcpp_result_gen;
END_RCPP
}
// peakfinder_cpp
Rcpp::IntegerVector peakfinder_cpp(const Rcpp::NumericVector& x, int m);
RcppExport SEXP _universalmotif_peakfinder_cpp(SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(peakfinder_cpp(x, m));
    return rcpp_result_gen;
END_RCPP
}
// linbin_cpp
Rcpp::IntegerVector linbin_cpp(const Rcpp::IntegerVector& x, const Rcpp::IntegerVector& gpoints);
RcppExport SEXP _universalmotif_linbin_cpp(SEXP xSEXP, SEXP gpointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type gpoints(gpointsSEXP);
    rcpp_result_gen = Rcpp::wrap(linbin_cpp(x, gpoints));
    return rcpp_result_gen;
END_RCPP
}
// motif_pvalue_cpp
std::vector<long double> motif_pvalue_cpp(const Rcpp::List& motifs, const Rcpp::List& bkg, const std::vector<double>& scores, const int& k, const int& nthreads);
RcppExport SEXP _universalmotif_motif_pvalue_cpp(SEXP motifsSEXP, SEXP bkgSEXP, SEXP scoresSEXP, SEXP kSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type motifs(motifsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(motif_pvalue_cpp(motifs, bkg, scores, k, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// branch_and_bound_cpp_exposed
Rcpp::IntegerMatrix branch_and_bound_cpp_exposed(Rcpp::IntegerMatrix mat, const int score);
RcppExport SEXP _universalmotif_branch_and_bound_cpp_exposed(SEXP matSEXP, SEXP scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const int >::type score(scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(branch_and_bound_cpp_exposed(mat, score));
    return rcpp_result_gen;
END_RCPP
}
// expand_scores
Rcpp::IntegerVector expand_scores(const Rcpp::IntegerMatrix& scores);
RcppExport SEXP _universalmotif_expand_scores(SEXP scoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type scores(scoresSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_scores(scores));
    return rcpp_result_gen;
END_RCPP
}
// paths_alph_unsort
Rcpp::IntegerMatrix paths_alph_unsort(const Rcpp::IntegerMatrix& paths, const Rcpp::IntegerMatrix& alph);
RcppExport SEXP _universalmotif_paths_alph_unsort(SEXP pathsSEXP, SEXP alphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type paths(pathsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type alph(alphSEXP);
    rcpp_result_gen = Rcpp::wrap(paths_alph_unsort(paths, alph));
    return rcpp_result_gen;
END_RCPP
}
// paths_to_alph
Rcpp::StringVector paths_to_alph(const Rcpp::IntegerMatrix& paths, const Rcpp::StringVector& alph);
RcppExport SEXP _universalmotif_paths_to_alph(SEXP pathsSEXP, SEXP alphSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type paths(pathsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type alph(alphSEXP);
    rcpp_result_gen = Rcpp::wrap(paths_to_alph(paths, alph));
    return rcpp_result_gen;
END_RCPP
}
// scan_sequences_cpp
Rcpp::DataFrame scan_sequences_cpp(const Rcpp::List& score_mats, const std::vector<std::string>& seq_vecs, const int& k, const std::string& alph, const std::vector<double>& min_scores, const int& nthreads);
RcppExport SEXP _universalmotif_scan_sequences_cpp(SEXP score_matsSEXP, SEXP seq_vecsSEXP, SEXP kSEXP, SEXP alphSEXP, SEXP min_scoresSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type score_mats(score_matsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type seq_vecs(seq_vecsSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type min_scores(min_scoresSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_sequences_cpp(score_mats, seq_vecs, k, alph, min_scores, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_markov_cpp
std::vector<std::string> shuffle_markov_cpp(const std::vector<std::string>& sequences, const int& k, const int& nthreads, const int& seed);
RcppExport SEXP _universalmotif_shuffle_markov_cpp(SEXP sequencesSEXP, SEXP kSEXP, SEXP nthreadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_markov_cpp(sequences, k, nthreads, seed));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_euler_cpp
std::vector<std::string> shuffle_euler_cpp(const std::vector<std::string>& sequences, const int& k, const int& nthreads, const int& seed);
RcppExport SEXP _universalmotif_shuffle_euler_cpp(SEXP sequencesSEXP, SEXP kSEXP, SEXP nthreadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_euler_cpp(sequences, k, nthreads, seed));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_linear_cpp
std::vector<std::string> shuffle_linear_cpp(const std::vector<std::string>& sequences, const int& k, const int& nthreads, const int& seed);
RcppExport SEXP _universalmotif_shuffle_linear_cpp(SEXP sequencesSEXP, SEXP kSEXP, SEXP nthreadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_linear_cpp(sequences, k, nthreads, seed));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_k1_cpp
std::vector<std::string> shuffle_k1_cpp(const std::vector<std::string>& sequences, const int& nthreads, const int& seed);
RcppExport SEXP _universalmotif_shuffle_k1_cpp(SEXP sequencesSEXP, SEXP nthreadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_k1_cpp(sequences, nthreads, seed));
    return rcpp_result_gen;
END_RCPP
}
// count_klets_cpp
std::vector<std::vector<int>> count_klets_cpp(const std::vector<std::string>& sequences, const int& k, const int& nthreads);
RcppExport SEXP _universalmotif_count_klets_cpp(SEXP sequencesSEXP, SEXP kSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(count_klets_cpp(sequences, k, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// get_klets_cpp
std::vector<std::string> get_klets_cpp(std::vector<std::string>& alph, const int& k);
RcppExport SEXP _universalmotif_get_klets_cpp(SEXP alphSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_klets_cpp(alph, k));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_markov_loop
Rcpp::String shuffle_markov_loop(R_xlen_t seq_i_l, R_xlen_t seq_i_r, int k, Rcpp::StringVector seqout, const Rcpp::StringVector& lets, const Rcpp::NumericMatrix& trans, const Rcpp::StringVector& trans_cols);
RcppExport SEXP _universalmotif_shuffle_markov_loop(SEXP seq_i_lSEXP, SEXP seq_i_rSEXP, SEXP kSEXP, SEXP seqoutSEXP, SEXP letsSEXP, SEXP transSEXP, SEXP trans_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type seq_i_l(seq_i_lSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type seq_i_r(seq_i_rSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type seqout(seqoutSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type lets(letsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type trans(transSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type trans_cols(trans_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_markov_loop(seq_i_l, seq_i_r, k, seqout, lets, trans, trans_cols));
    return rcpp_result_gen;
END_RCPP
}
// trim_motif_internal
Rcpp::NumericMatrix trim_motif_internal(const Rcpp::NumericMatrix& motif, const Rcpp::NumericVector& ic_scores, double min_ic);
RcppExport SEXP _universalmotif_trim_motif_internal(SEXP motifSEXP, SEXP ic_scoresSEXP, SEXP min_icSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type motif(motifSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type ic_scores(ic_scoresSEXP);
    Rcpp::traits::input_parameter< double >::type min_ic(min_icSEXP);
    rcpp_result_gen = Rcpp::wrap(trim_motif_internal(motif, ic_scores, min_ic));
    return rcpp_result_gen;
END_RCPP
}
// universalmotif_cpp
S4 universalmotif_cpp(NumericMatrix motif, String name, StringVector altname, StringVector family, StringVector organism, StringVector alphabet, StringVector type, NumericVector icscore, NumericVector nsites, double pseudocount, NumericVector bkg, NumericVector bkgsites, StringVector consensus, String strand, NumericVector pval, NumericVector qval, NumericVector eval, StringVector extrainfo);
RcppExport SEXP _universalmotif_universalmotif_cpp(SEXP motifSEXP, SEXP nameSEXP, SEXP altnameSEXP, SEXP familySEXP, SEXP organismSEXP, SEXP alphabetSEXP, SEXP typeSEXP, SEXP icscoreSEXP, SEXP nsitesSEXP, SEXP pseudocountSEXP, SEXP bkgSEXP, SEXP bkgsitesSEXP, SEXP consensusSEXP, SEXP strandSEXP, SEXP pvalSEXP, SEXP qvalSEXP, SEXP evalSEXP, SEXP extrainfoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type motif(motifSEXP);
    Rcpp::traits::input_parameter< String >::type name(nameSEXP);
    Rcpp::traits::input_parameter< StringVector >::type altname(altnameSEXP);
    Rcpp::traits::input_parameter< StringVector >::type family(familySEXP);
    Rcpp::traits::input_parameter< StringVector >::type organism(organismSEXP);
    Rcpp::traits::input_parameter< StringVector >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< StringVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type icscore(icscoreSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bkgsites(bkgsitesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type consensus(consensusSEXP);
    Rcpp::traits::input_parameter< String >::type strand(strandSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type qval(qvalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eval(evalSEXP);
    Rcpp::traits::input_parameter< StringVector >::type extrainfo(extrainfoSEXP);
    rcpp_result_gen = Rcpp::wrap(universalmotif_cpp(motif, name, altname, family, organism, alphabet, type, icscore, nsites, pseudocount, bkg, bkgsites, consensus, strand, pval, qval, eval, extrainfo));
    return rcpp_result_gen;
END_RCPP
}
// validObject_universalmotif
StringVector validObject_universalmotif(S4 motif, bool throw_error);
RcppExport SEXP _universalmotif_validObject_universalmotif(SEXP motifSEXP, SEXP throw_errorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type motif(motifSEXP);
    Rcpp::traits::input_parameter< bool >::type throw_error(throw_errorSEXP);
    rcpp_result_gen = Rcpp::wrap(validObject_universalmotif(motif, throw_error));
    return rcpp_result_gen;
END_RCPP
}
// summarise_motifs_cpp
DataFrame summarise_motifs_cpp(List motifs);
RcppExport SEXP _universalmotif_summarise_motifs_cpp(SEXP motifsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type motifs(motifsSEXP);
    rcpp_result_gen = Rcpp::wrap(summarise_motifs_cpp(motifs));
    return rcpp_result_gen;
END_RCPP
}
// universalmotif_to_list
List universalmotif_to_list(S4 motif);
RcppExport SEXP _universalmotif_universalmotif_to_list(SEXP motifSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< S4 >::type motif(motifSEXP);
    rcpp_result_gen = Rcpp::wrap(universalmotif_to_list(motif));
    return rcpp_result_gen;
END_RCPP
}
// comb2_cpp
std::vector<std::vector<int>> comb2_cpp(const int n);
RcppExport SEXP _universalmotif_comb2_cpp(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(comb2_cpp(n));
    return rcpp_result_gen;
END_RCPP
}
// table_cpp
Rcpp::IntegerVector table_cpp(const Rcpp::StringVector& x);
RcppExport SEXP _universalmotif_table_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(table_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_unique_cpp
Rcpp::StringVector sort_unique_cpp(const Rcpp::StringVector& x);
RcppExport SEXP _universalmotif_sort_unique_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_unique_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// collapse_rows_mat
Rcpp::StringVector collapse_rows_mat(const Rcpp::CharacterMatrix& seqs_k);
RcppExport SEXP _universalmotif_collapse_rows_mat(SEXP seqs_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterMatrix& >::type seqs_k(seqs_kSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_rows_mat(seqs_k));
    return rcpp_result_gen;
END_RCPP
}
// collapse_cols_mat
Rcpp::StringVector collapse_cols_mat(const Rcpp::CharacterMatrix& seqs_k);
RcppExport SEXP _universalmotif_collapse_cols_mat(SEXP seqs_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterMatrix& >::type seqs_k(seqs_kSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_cols_mat(seqs_k));
    return rcpp_result_gen;
END_RCPP
}
// collapse_rows_df
Rcpp::StringVector collapse_rows_df(const Rcpp::DataFrame& seqs_k);
RcppExport SEXP _universalmotif_collapse_rows_df(SEXP seqs_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type seqs_k(seqs_kSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_rows_df(seqs_k));
    return rcpp_result_gen;
END_RCPP
}
// collapse_cpp
Rcpp::String collapse_cpp(const Rcpp::StringVector& x);
RcppExport SEXP _universalmotif_collapse_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// print_pb
void print_pb(R_xlen_t out);
RcppExport SEXP _universalmotif_print_pb(SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< R_xlen_t >::type out(outSEXP);
    print_pb(out);
    return R_NilValue;
END_RCPP
}
// update_pb
void update_pb(R_xlen_t i, R_xlen_t max);
RcppExport SEXP _universalmotif_update_pb(SEXP iSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< R_xlen_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type max(maxSEXP);
    update_pb(i, max);
    return R_NilValue;
END_RCPP
}
// all_checks_collapse
Rcpp::String all_checks_collapse(const Rcpp::StringVector& checks);
RcppExport SEXP _universalmotif_all_checks_collapse(SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(all_checks_collapse(checks));
    return rcpp_result_gen;
END_RCPP
}
// pcm_to_ppmC
std::vector<double> pcm_to_ppmC(std::vector<double> pos, const double pseudocount);
RcppExport SEXP _universalmotif_pcm_to_ppmC(SEXP posSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< const double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(pcm_to_ppmC(pos, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// ppm_to_pcmC
std::vector<double> ppm_to_pcmC(std::vector<double> pos, double nsites);
RcppExport SEXP _universalmotif_ppm_to_pcmC(SEXP posSEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type nsites(nsitesSEXP);
    rcpp_result_gen = Rcpp::wrap(ppm_to_pcmC(pos, nsites));
    return rcpp_result_gen;
END_RCPP
}
// ppm_to_pwmC
std::vector<double> ppm_to_pwmC(std::vector<double> pos, std::vector<double> bkg, const double pseudocount, double nsites);
RcppExport SEXP _universalmotif_ppm_to_pwmC(SEXP posSEXP, SEXP bkgSEXP, SEXP pseudocountSEXP, SEXP nsitesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const double >::type pseudocount(pseudocountSEXP);
    Rcpp::traits::input_parameter< double >::type nsites(nsitesSEXP);
    rcpp_result_gen = Rcpp::wrap(ppm_to_pwmC(pos, bkg, pseudocount, nsites));
    return rcpp_result_gen;
END_RCPP
}
// pwm_to_ppmC
std::vector<double> pwm_to_ppmC(std::vector<double> pos, std::vector<double> bkg);
RcppExport SEXP _universalmotif_pwm_to_ppmC(SEXP posSEXP, SEXP bkgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type bkg(bkgSEXP);
    rcpp_result_gen = Rcpp::wrap(pwm_to_ppmC(pos, bkg));
    return rcpp_result_gen;
END_RCPP
}
// ppm_to_icmC
std::vector<double> ppm_to_icmC(std::vector<double> pos, std::vector<double> bkg, const bool relative_entropy);
RcppExport SEXP _universalmotif_ppm_to_icmC(SEXP posSEXP, SEXP bkgSEXP, SEXP relative_entropySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative_entropy(relative_entropySEXP);
    rcpp_result_gen = Rcpp::wrap(ppm_to_icmC(pos, bkg, relative_entropy));
    return rcpp_result_gen;
END_RCPP
}
// position_icscoreC
double position_icscoreC(std::vector<double> pos, std::vector<double> bkg, const std::string type, const double pseudocount, double nsites, const bool relative_entropy);
RcppExport SEXP _universalmotif_position_icscoreC(SEXP posSEXP, SEXP bkgSEXP, SEXP typeSEXP, SEXP pseudocountSEXP, SEXP nsitesSEXP, SEXP relative_entropySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type bkg(bkgSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const double >::type pseudocount(pseudocountSEXP);
    Rcpp::traits::input_parameter< double >::type nsites(nsitesSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative_entropy(relative_entropySEXP);
    rcpp_result_gen = Rcpp::wrap(position_icscoreC(pos, bkg, type, pseudocount, nsites, relative_entropy));
    return rcpp_result_gen;
END_RCPP
}
// icm_to_ppmC
std::vector<double> icm_to_ppmC(std::vector<double> pos);
RcppExport SEXP _universalmotif_icm_to_ppmC(SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(icm_to_ppmC(pos));
    return rcpp_result_gen;
END_RCPP
}
// get_consensusC
std::string get_consensusC(std::vector<double> pos, const std::string alphabet, const std::string type, const double pseudocount);
RcppExport SEXP _universalmotif_get_consensusC(SEXP posSEXP, SEXP alphabetSEXP, SEXP typeSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< const std::string >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(get_consensusC(pos, alphabet, type, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// consensus_to_ppmC
std::vector<double> consensus_to_ppmC(std::string letter);
RcppExport SEXP _universalmotif_consensus_to_ppmC(SEXP letterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type letter(letterSEXP);
    rcpp_result_gen = Rcpp::wrap(consensus_to_ppmC(letter));
    return rcpp_result_gen;
END_RCPP
}
// consensus_to_ppmAAC
std::vector<double> consensus_to_ppmAAC(std::string letter);
RcppExport SEXP _universalmotif_consensus_to_ppmAAC(SEXP letterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type letter(letterSEXP);
    rcpp_result_gen = Rcpp::wrap(consensus_to_ppmAAC(letter));
    return rcpp_result_gen;
END_RCPP
}
// get_consensusAAC
std::string get_consensusAAC(std::vector<double> pos, const std::string type, const double pseudocount);
RcppExport SEXP _universalmotif_get_consensusAAC(SEXP posSEXP, SEXP typeSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pos(posSEXP);
    Rcpp::traits::input_parameter< const std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(get_consensusAAC(pos, type, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// check_fun_params
std::vector<std::string> check_fun_params(const Rcpp::List& param_args, std::vector<int> param_len, std::vector<bool> param_null, int expected_type);
RcppExport SEXP _universalmotif_check_fun_params(SEXP param_argsSEXP, SEXP param_lenSEXP, SEXP param_nullSEXP, SEXP expected_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type param_args(param_argsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type param_len(param_lenSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type param_null(param_nullSEXP);
    Rcpp::traits::input_parameter< int >::type expected_type(expected_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(check_fun_params(param_args, param_len, param_null, expected_type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_universalmotif_single_to_k", (DL_FUNC) &_universalmotif_single_to_k, 2},
    {"_universalmotif_compare_motifs_cpp", (DL_FUNC) &_universalmotif_compare_motifs_cpp, 13},
    {"_universalmotif_compare_motifs_all_cpp", (DL_FUNC) &_universalmotif_compare_motifs_all_cpp, 11},
    {"_universalmotif_get_comparison_matrix", (DL_FUNC) &_universalmotif_get_comparison_matrix, 5},
    {"_universalmotif_view_motifs_prep", (DL_FUNC) &_universalmotif_view_motifs_prep, 10},
    {"_universalmotif_merge_motifs_cpp", (DL_FUNC) &_universalmotif_merge_motifs_cpp, 9},
    {"_universalmotif_peakfinder_cpp", (DL_FUNC) &_universalmotif_peakfinder_cpp, 2},
    {"_universalmotif_linbin_cpp", (DL_FUNC) &_universalmotif_linbin_cpp, 2},
    {"_universalmotif_motif_pvalue_cpp", (DL_FUNC) &_universalmotif_motif_pvalue_cpp, 5},
    {"_universalmotif_branch_and_bound_cpp_exposed", (DL_FUNC) &_universalmotif_branch_and_bound_cpp_exposed, 2},
    {"_universalmotif_expand_scores", (DL_FUNC) &_universalmotif_expand_scores, 1},
    {"_universalmotif_paths_alph_unsort", (DL_FUNC) &_universalmotif_paths_alph_unsort, 2},
    {"_universalmotif_paths_to_alph", (DL_FUNC) &_universalmotif_paths_to_alph, 2},
    {"_universalmotif_scan_sequences_cpp", (DL_FUNC) &_universalmotif_scan_sequences_cpp, 6},
    {"_universalmotif_shuffle_markov_cpp", (DL_FUNC) &_universalmotif_shuffle_markov_cpp, 4},
    {"_universalmotif_shuffle_euler_cpp", (DL_FUNC) &_universalmotif_shuffle_euler_cpp, 4},
    {"_universalmotif_shuffle_linear_cpp", (DL_FUNC) &_universalmotif_shuffle_linear_cpp, 4},
    {"_universalmotif_shuffle_k1_cpp", (DL_FUNC) &_universalmotif_shuffle_k1_cpp, 3},
    {"_universalmotif_count_klets_cpp", (DL_FUNC) &_universalmotif_count_klets_cpp, 3},
    {"_universalmotif_get_klets_cpp", (DL_FUNC) &_universalmotif_get_klets_cpp, 2},
    {"_universalmotif_shuffle_markov_loop", (DL_FUNC) &_universalmotif_shuffle_markov_loop, 7},
    {"_universalmotif_trim_motif_internal", (DL_FUNC) &_universalmotif_trim_motif_internal, 3},
    {"_universalmotif_universalmotif_cpp", (DL_FUNC) &_universalmotif_universalmotif_cpp, 18},
    {"_universalmotif_validObject_universalmotif", (DL_FUNC) &_universalmotif_validObject_universalmotif, 2},
    {"_universalmotif_summarise_motifs_cpp", (DL_FUNC) &_universalmotif_summarise_motifs_cpp, 1},
    {"_universalmotif_universalmotif_to_list", (DL_FUNC) &_universalmotif_universalmotif_to_list, 1},
    {"_universalmotif_comb2_cpp", (DL_FUNC) &_universalmotif_comb2_cpp, 1},
    {"_universalmotif_table_cpp", (DL_FUNC) &_universalmotif_table_cpp, 1},
    {"_universalmotif_sort_unique_cpp", (DL_FUNC) &_universalmotif_sort_unique_cpp, 1},
    {"_universalmotif_collapse_rows_mat", (DL_FUNC) &_universalmotif_collapse_rows_mat, 1},
    {"_universalmotif_collapse_cols_mat", (DL_FUNC) &_universalmotif_collapse_cols_mat, 1},
    {"_universalmotif_collapse_rows_df", (DL_FUNC) &_universalmotif_collapse_rows_df, 1},
    {"_universalmotif_collapse_cpp", (DL_FUNC) &_universalmotif_collapse_cpp, 1},
    {"_universalmotif_print_pb", (DL_FUNC) &_universalmotif_print_pb, 1},
    {"_universalmotif_update_pb", (DL_FUNC) &_universalmotif_update_pb, 2},
    {"_universalmotif_all_checks_collapse", (DL_FUNC) &_universalmotif_all_checks_collapse, 1},
    {"_universalmotif_pcm_to_ppmC", (DL_FUNC) &_universalmotif_pcm_to_ppmC, 2},
    {"_universalmotif_ppm_to_pcmC", (DL_FUNC) &_universalmotif_ppm_to_pcmC, 2},
    {"_universalmotif_ppm_to_pwmC", (DL_FUNC) &_universalmotif_ppm_to_pwmC, 4},
    {"_universalmotif_pwm_to_ppmC", (DL_FUNC) &_universalmotif_pwm_to_ppmC, 2},
    {"_universalmotif_ppm_to_icmC", (DL_FUNC) &_universalmotif_ppm_to_icmC, 3},
    {"_universalmotif_position_icscoreC", (DL_FUNC) &_universalmotif_position_icscoreC, 6},
    {"_universalmotif_icm_to_ppmC", (DL_FUNC) &_universalmotif_icm_to_ppmC, 1},
    {"_universalmotif_get_consensusC", (DL_FUNC) &_universalmotif_get_consensusC, 4},
    {"_universalmotif_consensus_to_ppmC", (DL_FUNC) &_universalmotif_consensus_to_ppmC, 1},
    {"_universalmotif_consensus_to_ppmAAC", (DL_FUNC) &_universalmotif_consensus_to_ppmAAC, 1},
    {"_universalmotif_get_consensusAAC", (DL_FUNC) &_universalmotif_get_consensusAAC, 3},
    {"_universalmotif_check_fun_params", (DL_FUNC) &_universalmotif_check_fun_params, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_universalmotif(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
