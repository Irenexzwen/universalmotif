% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-motif.R
\name{utils-motif}
\alias{utils-motif}
\alias{consensus_to_ppm}
\alias{consensus_to_ppmAA}
\alias{get_consensus}
\alias{get_consensusAA}
\alias{get_matches}
\alias{icm_to_ppm}
\alias{make_DBscores}
\alias{motif_score}
\alias{pcm_to_ppm}
\alias{position_icscore}
\alias{ppm_to_icm}
\alias{ppm_to_pcm}
\alias{ppm_to_pwm}
\alias{pwm_to_ppm}
\alias{score_match}
\alias{summarise_motifs}
\title{Motif-related utility functions.}
\usage{
consensus_to_ppm(letter)

consensus_to_ppmAA(letter)

get_consensus(position, alphabet = "DNA", type = "PPM",
  pseudocount = 1)

get_consensusAA(position, type = "PPM", pseudocount = 0)

get_matches(motif, score)

icm_to_ppm(position)

make_DBscores(db.motifs, method, shuffle.db = TRUE, shuffle.k = 3,
  shuffle.method = "linear", rand.tries = 100, widths = 5:30,
  normalise.scores = TRUE, min.overlap = 6, min.mean.ic = 0.25,
  progress = TRUE, BP = FALSE, nthreads = 1)

motif_score(motif, threshold = c(0, 1))

pcm_to_ppm(position, pseudocount = 0)

position_icscore(position, bkg = 0, type = "PPM", pseudocount = 1,
  nsites = 100, relative_entropy = FALSE)

ppm_to_icm(position, bkg, schneider_correction = FALSE, nsites = 100,
  relative_entropy = FALSE)

ppm_to_pcm(position, nsites = 100)

ppm_to_pwm(position, bkg, pseudocount = 1, nsites = 100,
  smooth = TRUE)

pwm_to_ppm(position, bkg)

score_match(motif, match)

summarise_motifs(motifs, na.rm = TRUE)
}
\arguments{
\item{letter}{\code{character(1)} Any DNA, RNA, or AA IUPAC letter. Ambiguity letters
are accepted.}

\item{position}{\code{numeric} A numeric vector representing the frequency or
probability for each alphabet letter at a specific position.}

\item{alphabet}{\code{character(1)} One of \code{c('DNA', 'RNA')}.}

\item{type}{\code{character(1)} One of \code{c('PCM', 'PPM', 'PWM' 'ICM')}.}

\item{pseudocount}{\code{numeric(1)} Used to prevent zeroes in motif matrix.}

\item{motif}{Motif object to calculate scores from.}

\item{score}{\code{numeric(1)} Logodds motif score.}

\item{db.motifs}{\code{list} Database motifs.}

\item{method}{\code{character(1)} One of \code{c('PCC', 'MPCC', 'EUCL', 'MEUCL', 'SW', 'MSW', 'KL', 'MKL')}. See \code{\link[=compare_motifs]{compare_motifs()}}.}

\item{shuffle.db}{\code{logical(1)} Shuffle \code{db.motifs} rather than
generate random motifs with \code{\link[=create_motif]{create_motif()}}.}

\item{shuffle.k}{\code{numeric(1)} See \code{\link[=shuffle_motifs]{shuffle_motifs()}}.}

\item{shuffle.method}{\code{character(1)} See \code{\link[=shuffle_motifs]{shuffle_motifs()}}.}

\item{rand.tries}{\code{numeric(1)} Number of random motifs to create for
P-value computation.}

\item{widths}{\code{numeric} Motif widths to use in P-value database calculation.}

\item{normalise.scores}{\code{logical(1)} See \code{\link[=compare_motifs]{compare_motifs()}}.}

\item{min.overlap}{\code{numeric(1)} Minimum required motif overlap. See
\code{\link[=compare_motifs]{compare_motifs()}}.}

\item{min.mean.ic}{\code{numeric(1)} See \code{\link[=compare_motifs]{compare_motifs()}}.}

\item{progress}{\code{logical(1)} Show progress. Not recommended if \code{BP = TRUE}.}

\item{BP}{\code{logical(1)} Use the \pkg{BiocParallel} package. See
\code{\link[BiocParallel:register]{BiocParallel::register()}} to change the default backend.}

\item{nthreads}{\code{numeric(1)} Run \code{\link[=compare_motifs]{compare_motifs()}} in parallel with \code{nthreads}
threads. \code{nthreads = 0} uses all available threads.}

\item{threshold}{\code{numeric(1)} Any number of numeric values between 0 and 1
representing score percentage.}

\item{bkg}{\code{Numeric} Should be the same length as the alphabet length.}

\item{nsites}{\code{numeric(1)} Number of sites motif originated from.}

\item{relative_entropy}{\code{logical(1)} Calculate information content as
relative entropy or Kullback-Leibler divergence.}

\item{schneider_correction}{\code{logical(1)} Apply sample size correction.}

\item{smooth}{\code{logical(1)} Apply pseudocount correction.}

\item{match}{\code{character(1)} Sequence string to calculate score from.}

\item{motifs}{\code{list} A list of \linkS4class{universalmotif} motifs.}

\item{na.rm}{\code{logical} Remove columns where all values are \code{NA}.}
}
\value{
For \code{\link[=consensus_to_ppm]{consensus_to_ppm()}} and \code{\link[=consensus_to_ppmAA]{consensus_to_ppmAA()}}: a numeric
vector of length 4 and 20, respectively.

For \code{\link[=get_consensus]{get_consensus()}} and \code{\link[=get_consensusAA]{get_consensusAA()}}: a character vector
of length 1.

For \code{\link[=get_matches]{get_matches()}}: a \code{character} vector of motif matches.

For \code{\link[=make_DBscores]{make_DBscores()}}: a \code{data.frame} with score distributions for the
input database.

For \code{\link[=motif_score]{motif_score()}}: a named \code{numeric} vector of motif scores.

For \code{\link[=position_icscore]{position_icscore()}}: a \code{numeric} vector of length 1.

For \code{\link[=ppm_to_icm]{ppm_to_icm()}}, \code{\link[=icm_to_ppm]{icm_to_ppm()}}, \code{\link[=pcm_to_ppm]{pcm_to_ppm()}},
\code{\link[=ppm_to_pcm]{ppm_to_pcm()}}, \code{\link[=ppm_to_pwm]{ppm_to_pwm()}}, and \code{\link[=pwm_to_ppm]{pwm_to_ppm()}}: a \code{numeric}
vector with length equal to input \code{numeric} vector.

For \code{\link[=score_match]{score_match()}}: a \code{numeric} vector with the match motif score.

For \code{\link[=summarise_motifs]{summarise_motifs()}}: a \code{data.frame} with columns representing
the \linkS4class{universalmotif} slots.
}
\description{
Motif-related utility functions.
}
\examples{
#######################################################################
## Setting up some variables
data(examplemotif)
m <- normalize(examplemotif)
motif <- create_motif(nsites = 100, pseudocount = 0.8)["motif"]
motif.icm <- apply(motif, 2, ppm_to_icm, nsites = 100,
                   bkg = c(0.25, 0.25, 0.25, 0.25))
motif.ppm <- apply(motif.icm, 2, icm_to_ppm)
motif.consensus <- apply(motif.ppm, 2, get_consensus)
motif.aa <- create_motif(alphabet = "AA")["motif"]
motif.aa.consensus <- apply(motif.aa, 2, get_consensusAA, type = "PPM")
#######################################################################

#######################################################################
## consensus_to_ppm
## Do the opposite of get_consensus. Note that loss of information is
## inevitable.
motif.ppm4 <- sapply(motif.consensus, consensus_to_ppm)

#######################################################################
## consensus_to_ppmAA
## Do the opposite of get_consensusAA.
motif.aa2 <- sapply(motif.aa.consensus, consensus_to_ppmAA)

#######################################################################
## get_consensus
## Get a consensus string from a DNA/RNA motif.
motif.consensus <- apply(motif.ppm, 2, get_consensus)

#######################################################################
## get_consensusAA
## Get a consensus string from an amino acid motif. Unless each position
## is clearly dominated by a single amino acid, the resulting string will
## likely be useless.
motif.aa <- create_motif(alphabet = "AA")["motif"]
motif.aa.consensus <- apply(motif.aa, 2, get_consensusAA, type = "PPM")

#######################################################################
## get_match
## Get all possible motif matches above input score
get_matches(m, 10)

#######################################################################
## icm_to_ppm
## Do the opposite of ppm_to_icm.
motif.ppm <- apply(motif.icm, 2, icm_to_ppm)

#######################################################################
## make_DBscores
## Generate P-value database for use with compare_motifs. Note that these
## must be created individually for all combinations of methods and
## normalisation.
\dontrun{
library(MotifDb)
motifs <- convert_motifs(MotifDb[1:100])
make_DBscores(motifs, method = "PCC")
}

#######################################################################
## motif_score
## Calculate motif score from different thresholds
data(examplemotif)
m <- normalize(examplemotif)
motif_score(m, c(0, 0.8, 1))

#######################################################################
## pcm_to_ppm
## Go from a count type motif to a probability type motif.
motif.pcm <- create_motif(type = "PCM", nsites = 50)["motif"]
motif.ppm2 <- apply(motif.pcm, 2, pcm_to_ppm, pseudocount = 1)

#######################################################################
## position_icscore
## Similar to ppm_to_icm, except this calculates a sum for the position.
ic.scores <- apply(motif.ppm, 2, position_icscore, type = "PPM",
                   bkg = c(0.25, 0.25, 0.25, 0.25))

#######################################################################
## ppm_to_icm
## Convert one column from a probability type motif to an information
## content type motif.
motif <- create_motif(nsites = 100, pseudocount = 0.8)["motif"]
motif.icm <- apply(motif, 2, ppm_to_icm, nsites = 100,
                   bkg = c(0.25, 0.25, 0.25, 0.25))

#######################################################################
## ppm_to_pcm
## Do the opposite of pcm_to_ppm.
motif.pcm2 <- apply(motif.ppm2, 2, ppm_to_pcm, nsites = 50)

#######################################################################
## ppm_to_pwm
## Go from a probability type motif to a weight type motif.
motif.pwm <- apply(motif.ppm, 2, ppm_to_pwm, nsites = 100,
                   bkg = c(0.25, 0.25, 0.25, 0.25))

#######################################################################
## pwm_to_ppm
## Do the opposite of ppm_to_pwm.
motif.ppm3 <- apply(motif.pwm, 2, pwm_to_ppm,
                    bkg = c(0.25, 0.25, 0.25, 0.25))

#######################################################################
## Note that not all type conversions can be done directly; for those
## type conversions which are unavailable, universalmotif just chains
## together others (i.e. from PCM -> ICM => pcm_to_ppm -> ppm_to_icm)

#######################################################################
## score_match
## Calculate score of a particular match
score_match(m, "TATATAT")
score_match(m, "TATATAG")

#######################################################################
## summarise_motifs
## Create a data.frame of information based on a list of motifs.
m1 <- create_motif()
m2 <- create_motif()
m3 <- create_motif()
summarise_motifs(list(m1, m2, m3))

}
\seealso{
\code{\link[=create_motif]{create_motif()}}
}
\author{
Benjamin Jean-Marie Tremblay, \email{b2tremblay@uwaterloo.ca}
}
