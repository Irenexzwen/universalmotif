% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scan_sequences.R
\name{scan_sequences}
\alias{scan_sequences}
\title{Scan sequences for matches to input motifs.}
\usage{
scan_sequences(motifs, sequences, threshold = 0.001,
  threshold.type = "pvalue", RC = FALSE, use.freq = 1, verbose = 1,
  progress = TRUE, BP = FALSE)
}
\arguments{
\item{motifs}{See \code{convert_motifs()} for acceptable motif formats.}

\item{sequences}{\code{\link{XStringSet}} Sequences to scan. Alphabet
should match motif.}

\item{threshold}{\code{numeric(1)} Between 0 and 1. See details.}

\item{threshold.type}{\code{character(1)} One of \code{c('logodds', 'pvalue')}.
See details.}

\item{RC}{\code{logical(1)} If \code{TRUE}, check reverse complement of input
sequences.}

\item{use.freq}{\code{numeric(1)} The default, 1, uses the motif matrix (from
the \code{motif['motif']} slot) to search for sequences. If a higher
number is used, then the matching k-let matrix from the
\code{motif['multifreq']} slot is used. See \code{\link[=add_multifreq]{add_multifreq()}}.}

\item{verbose}{\code{numeric(1)} Describe progress, from none (\code{0}) to very
verbose (\code{3}).}

\item{progress}{\code{logical(1)} Show progress. Not recommended if \code{BP = TRUE}.
Set to \code{FALSE} if \code{verbose = 0}.}

\item{BP}{\code{logical(1)} Allows for the use of \pkg{BiocParallel} within
\code{\link[=scan_sequences]{scan_sequences()}}. See \code{\link[BiocParallel:register]{BiocParallel::register()}} to change the
default backend. Setting \code{BP = TRUE} is only recommended for
exceptionally large jobs. Keep in mind however that this function
will not attempt to limit its memory usage. Furthermore, the
behaviour of \code{porgress = TRUE} is changed if \code{BP = TRUE}; the
default \pkg{BiocParallel} progress bar will be shown (which
unfortunately is much less informative).}
}
\value{
\code{data.frame} with each row representing one hit; if the input
sequences are \code{\link{DNAStringSet}} or
\code{\link{RNAStringSet}}, then an
additional column with the strand is included.
}
\description{
For sequences of any alphabet, scan them using the PWM matrices of
a set of input motifs.
}
\details{
Similar to \code{\link[Biostrings:matchPWM]{Biostrings::matchPWM()}}, the scanning method uses
logodds scoring. (To see the scoring matrix for any motif, simply
run \code{convert_type(motif, "PWM")}; for a \code{multifreq} scoring
matrix: \code{apply(motif["multifreq"]$}2\code{, 2, ppm_to_pwm)}). In order
to score a sequence, at each position within a sequence of length equal
to the length of the motif, the scores for each base are summed. If the
score sum is above the desired threshold, it is kept.

If \code{threshold.type = 'logodds'}, then to calculate the minimum
allowed score the total possible score for a motif is multiplied
by the value set by \code{threshold}. To determine the maximum and minimum
possible scores a motif (of type PWM), run
\code{sum(apply(motif['motif'], 2, max))} and
\code{sum(apply(motif['motif'], 2, min))}. If \code{threshold.type = 'pvalue'},
then threshold logodds scores are generated using \code{\link[=motif_pvalue]{motif_pvalue()}}.

Non-standard letters (such as "N", "+", "-", ".", etc in \code{DNAString}
objects) will be safely ignored, resulting only in a warning and a very
minor performance cost. This can used to scan
masked sequences. See \code{\link[Biostrings:maskMotif]{Biostrings::mask()}}
for masking sequences
(generating \code{MaskedXString} objects), and \code{\link[Biostrings:injectHardMask]{Biostrings::injectHardMask()}}
to recover masked \code{XStringSet} objects for use with \code{\link[=scan_sequences]{scan_sequences()}}.
}
\examples{
## any alphabet can be used
\dontrun{
set.seed(1)
alphabet <- paste(c(letters), collapse = "")
motif <- create_motif("hello", alphabet = alphabet)
sequences <- create_sequences(alphabet, seqnum = 1000, seqlen = 100000)
scan_sequences(motif, sequences)
}

## Sequence masking:
library(Biostrings)
data(ArabidopsisMotif)
data(ArabidopsisPromoters)
seq <- ArabidopsisPromoters[[1]]  # Only works for XString, not XStringSet
seq <- mask(seq, pattern = "AAAA")  # MaskedDNAString class
seq <- injectHardMask(seq, letter = "+")  # Recover XString
seq <- DNAStringSet(seq)  # scan_sequences() needs XStringSet
scan_sequences(ArabidopsisMotif, seq, verbose = 0, progress = FALSE)
# A warning regarding the presence of non-standard letters will be given,
# but can be safely ignored in this case.

}
\references{
\insertRef{biostrings}{universalmotif}
}
\seealso{
\code{\link[=add_multifreq]{add_multifreq()}}, \code{\link[Biostrings:matchPWM]{Biostrings::matchPWM()}},
\code{\link[=enrich_motifs]{enrich_motifs()}}, \code{\link[=motif_pvalue]{motif_pvalue()}}
}
\author{
Benjamin Jean-Marie Tremblay, \email{b2tremblay@uwaterloo.ca}
}
