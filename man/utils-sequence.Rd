% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-sequence.R
\name{utils-sequence}
\alias{utils-sequence}
\alias{count_klets}
\alias{get_klets}
\alias{shuffle_string}
\title{Sequence-related utility functions.}
\usage{
count_klets(string, k = 1, alph)

get_klets(lets, k = 1)

shuffle_string(string, k = 1, method = c("euler", "linear", "markov"),
  rng.seed = sample.int(1e+09, 1))
}
\arguments{
\item{string}{\code{character(1)} A length one character vector.}

\item{k}{\code{integer(1)} K-let size.}

\item{alph}{\code{character(1)} A single character string with the desired
sequence alphabet. If missing, finds the unique letters in the string.}

\item{lets}{\code{character} A character vector where each element will be
considered a single unit.}

\item{method}{\code{character(1)} Shuffling method. One of \code{c("euler", "linear", "markov")}. See \code{\link[=shuffle_sequences]{shuffle_sequences()}}.}

\item{rng.seed}{\code{numeric(1)} Set random number generator seed. Since shuffling
in \code{\link[=shuffle_sequences]{shuffle_sequences()}} can occur simultaneously in multiple threads using C++,
it cannot communicate
with the regular \code{R} random number generator state and thus requires an
independent seed. Since \code{\link[=shuffle_string]{shuffle_string()}} uses the same underlying code
as \code{\link[=shuffle_sequences]{shuffle_sequences()}}, it also requires a separate seed even if it is
run in serial.}
}
\value{
For \code{\link[=count_klets]{count_klets()}}: A \code{data.frame} with columns \code{lets} and \code{counts}.

For \code{\link[=get_klets]{get_klets()}}: A \code{character} vector of k-lets.

For \code{\link[=shuffle_string]{shuffle_string()}}: A single \code{character} string`.
}
\description{
Sequence-related utility functions.
}
\examples{
#######################################################################
## count_klets
## Count k-lets for any string of characters
count_klets("GCAAATGTACGCAGGGCCGA", k = 2)
## The default 'k' value (1) counts individual letters
count_klets("GCAAATGTACGCAGGGCCGA")

#######################################################################
## get_klets
## Generate all possible k-lets for a set of characters
get_klets(c("A", "C", "G", "T"), 3)
## Note that each element in 'lets' is considered a single unit;
## see:
get_klets(c("AA", "B"), k = 2)

#######################################################################
## shuffle_string
## Shuffle any string of characters
shuffle_string("ASDADASDASDASD", k = 2)

}
\seealso{
\code{\link[=create_sequences]{create_sequences()}}, \code{\link[=shuffle_sequences]{shuffle_sequences()}}
}
\author{
Benjamin Jean-Marie Tremblay, \email{b2tremblay@uwaterloo.ca}
}
