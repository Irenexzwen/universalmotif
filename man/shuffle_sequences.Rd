% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shuffle_sequences.R
\name{shuffle_sequences}
\alias{shuffle_sequences}
\title{Shuffle input sequences.}
\usage{
shuffle_sequences(sequences, k = 1, method = "linear",
  leftovers = "asis", progress = FALSE, BP = FALSE)
}
\arguments{
\item{sequences}{\code{\link{XStringSet}} Set of sequences to shuffle. Works
with any set of characters.}

\item{k}{\code{numeric(1)} K-let size.}

\item{method}{\code{character(1)} One of \code{c('markov', 'linear', 'random')}.
Only relevant is \code{k > 1}. See details. The \code{'random'} method will be
removed in the next minor version.}

\item{leftovers}{\code{character(1)} For \code{method = 'random'}. One of
\code{c('asis', 'first', 'split', 'discard')}.}

\item{progress}{\code{logical(1)} Show progress. Not recommended if \code{BP = TRUE}.}

\item{BP}{\code{logical(1)} Allows the use of \pkg{BiocParallel} within
\code{\link[=shuffle_sequences]{shuffle_sequences()}}. See \code{\link[BiocParallel:register]{BiocParallel::register()}} to change the default
backend. Setting \code{BP = TRUE} is only recommended for large jobs (such as
shuffling billions of letters). Furthermore, the behaviour of \code{progress = TRUE}
is changed if \code{BP = TRUE}; the default \pkg{BiocParallel} progress bar will
be shown (which unfortunately is much less informative).}
}
\value{
\code{\link{XStringSet}} The input sequences will be returned with
identical names and lengths.
}
\description{
Given a set of input sequences, shuffle the letters within those
sequences with any k-let size.
}
\details{
If \code{method = 'markov'}, then the Markov model is used to
generate sequences which will maintain (on average) the k-let
frequencies. Please note that this method is not a 'true' shuffling, and
for short sequences (e.g. <100bp) this can result in slightly more
dissimilar sequences versus true shuffling. See
\insertCite{markovmodel;textual}{universalmotif} and
\insertCite{markovmodel2;textual}{universalmotif} for a discussion on the
topic.

If \code{method = 'linear'}, then the input sequences are split linearly
every \code{k} letters; for example, for \code{k = 3} 'ACAGATAGACCC' becomes
'ACA GAT AGA CCC'; after which these \code{3}-lets are shuffled randomly.

Do note however, that the \code{method} parameter is only relevant for \code{k > 1}.
For this, a simple \code{sample} call is performed.

Regarding performance: \code{method = 'linear'} for any \code{k > 1} is very
efficient and nearly as fast as for \code{k = 1}. Shuffling
with \code{method = 'markov'} is roughly ten times slower but requires less
total allocated memory.
}
\examples{
sequences <- create_sequences()
sequences.shuffled <- shuffle_sequences(sequences, k = 2)

}
\references{
\insertRef{markovmodel2}{universalmotif}

\insertRef{markovmodel}{universalmotif}
}
\seealso{
\code{\link[=create_sequences]{create_sequences()}}, \code{\link[=scan_sequences]{scan_sequences()}}, \code{\link[=enrich_motifs]{enrich_motifs()}},
\code{\link[=shuffle_motifs]{shuffle_motifs()}}
}
\author{
Benjamin Jean-Marie Tremblay, \email{b2tremblay@uwaterloo.ca}
}
