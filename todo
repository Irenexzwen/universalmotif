- Do the read/write_motifs() functions work with the gap slots?
- Still need to rework compare_motifs() p-values
- Think about writting my own geom_motif()
- Extend current view_motifs() implementation for higher k motifs
- Scan for motif clusters
- Check that everything in convert_motifs() still works
- Check that all read/write_*() functions still work
- Add tests
- Visualisation of scan_sequences()/enrich_motifs()
- Work on Rmd output of compare_motifs()
- motif_peaks(): compare two sets of sequences (enrichment analysis)
- motif_peaks(): serious code cleanup needed
- Add scan_sequences() gapped motif example to vignettes
- dependencies to consider removing: ggseqlogo, yaml, Rdpack
- Add an optional list type which can be used by various universalmotif functions
    + universalmotifList
    + Can do vectorized operations such as subset all names with `[`
- Remove some of the input parameter checking in merge_motifs()/view_motifs()/
  motif_tree(), rely solely on compare_motifs()
- in read_*() files, check to input file exists
- scan_sequences(): add option to return GRanges object?
- scan_sequences(): return a Biostring Views object?
- change internal motif precision limit from 1e-3 to 1e-6 (will require changes
  to how allow.nonfinite works)
- add a vignette section about pseudocounts and how the functions interact with
  them
- small meme p-values solution: keep the pval/qval/eval slots as log-transformed,
  un-log for print and `[` methods?
- shuffle_sequences(): add local shuffling
- get_bkg(ArabidopsisPromoters, as.prob = FALSE, alphabet = "ACG"): incorrectly
  counting A's, AA's, AAA's (looks like it's adding up the T's to the first
  klet for every "k")
- get_bkg(): rewrite so that all window code is in c++ (like in sequence-utils)
- de novo motifs:
    + first search 4/5/6/7/8-mers for enrichment differences (either
      against background or statistically expected based on 1/2/3-let frequencies)
    + then for significantly enriched k-mers, start changing PWM positions to
      see if that increases significance/enrichment OR start merging enriched
      k-mers? (fast version: only k-mer merging?)
    + for every enriched k-mer, scan with a logodds threshold of 0 -- look
      for enrichment of lower score hits?
    + finally extend motif until desired length
    + trim useless edges
- is the MEME E/p-value log10 or natural log?
- when normalizing, send out a message when no nsite value is present
    + fix normalizations so that one message is sent per list of motifs...
    + scan_sequences(), motif_pvalue(), various utils-motif, etc?
- let switch_alph() be used to change to arbitrary alphabets (but keep default
  behaviour consistent with previous version!)
